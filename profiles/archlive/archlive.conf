#Archlive定制配置文件

ARCH="i686"
#ARCH="x86_64"
CDNAME="archlive"
IMG_TYPE="iso"

# 目标镜像引导程序类型 syslinux grub grub-gfx grub2可选
BOOT="syslinux"

PUBLISHER="http://archlive.googlecode.com/"
AUTHOR="Carbon Jiao"

# 制作基于Arch的live系统的配置文件及文件夹(config list pacman.conf等)相对mkarchlive存放位置
# archlive.conf 实际存放路径必须跟如下设置一致
PROFILE_DIR=profiles/archlive

# 制作archlive过程中下载的软件包存放位置
CACHE=""
# 如果宿主系统是Arch，mkarchlive脚本会自动检测系统缓存设置
# 如果宿主系统不是Arch，此处最好设置一个自己喜欢的地址，否者将设置为默认的/var/cache/pacman/pkg

# 制作archlive的临时工作目录——目标镜像也放在该目录下，确保有足够空间
WORK_DIR=
# 设置为绝对路径  比如 /0812  最好不要"/0812" (除路径外的一切字符都不要添加)
# 如果不设置，则脚本自动将工作目录设置为  /月日  比如 今天8月12日，则为 /0812

#目标镜像名称
IMGNAME="archlive-$ARCH-$(date +%F).iso"
# 放于WORK_DIR目录下

#模块压缩方式
#ZIP_MODE=1 #采用squashfs3 标准压缩
#ZIP_MODE=2 #采用squashfs3+lzma模式压缩
ZIP_MODE=3 #采用squashfs4 压缩
# 对应模式的squashfs文件系统内核模块软件包必须包含于目标系统的软件清单中(修改0_000_core.list加入)

# 静态制作，比如mksquashfs不输出状态信息等
#QUIET="y"
QUIET="n"

#确认继续等待的时间
time=5

# 制作过程中输出信息是否有特别颜色
#COLOR=y	#有特别颜色
COLOR=n	#无特别颜色

# 是否强制覆盖——如果工作目录已经存在是否覆盖制作archlive
# 此处不设置的话，mkarchlive脚本会自动设置为强制覆盖
#FORCE="y"
FORCE="n"

# 是否精简locale
CUT_LOCALE="y"
# 模块中不删除的locale
REMAIN_LOCALE="l10n|zh_CN"
#REMAIN_LOCALE="zh_CN|zh_TW|zh_HK|de_DE"
# 多语言的时候中间用“|”隔开

# 目标系统所装内核的版本文件位置，如果使用官方内核及archlive内核则不可改以下变量
KER_VERSION_FILE="etc/mkinitcpio.d/kernel26.preset"
#KER_VERSION_FILE="etc/mkinitcpio.d/kernel26.kver"

# 主要定制内容
# ==============================================================
# 定制archlive主要在以下软件清单中做文章：
# 1、通过MODULES定制需要包含的模块，archlive提供的软件清单分级别如下：
#    0级：最基础模块;
#    1级：命令行应用程序;
#    2级：基本X模块，包含小型桌面环境、xorg等
#    3级：常用X程序及库
#    4级：独立X应用程序模块
#    5级：中、大型桌面环境
#    ...
# 2、通过定义模块软件清单来定制
#    软件清单中，如果属于archlive archlive-pkg的定制包或者编译包或者定制编译包都有特别注明
# 3、如果定制的软件清单中的部分软件包在官方库里面没有，则通过自定义软件仓来解决
#

# 模块清单文件夹
LISTDIR="std"
#LISTDIR="std archlive"

# 模块清单   默认在list文件夹中读取 
# 如果定义了版本信息将被忽略
# 可以采用#注释去掉
MODULES="0_000_core
0_001_base
0_002_python
1_001_app
2_003_xorg
3_004_xlib
3_005_xapps
3_006_medialib
3_007_qt
#3_008_java
3_009_media
#3_qtmod
#3_samba
#3_subversion
#4_dropbox
4_firefox
#4_gimp
#4_opera
4_printer
#4_skype
4_vim
#4_virtualbox
#4_wine
#5_006_e17_svn
#5_007_xfce4
#5_007_xfce4-git
5_008_gnome
5_008_gnome_extra
5_009_kde
5_009_kde_extra
6_010_devel
"
# 以上模块中包含内核的模块名
KERNEL_MOD="0_000_core"
# 如果此处不定义，默认采用ls所列第一个
# 如果内核不包含于ls所列第一个模块中，此处必须定义
# **********注意：凡是包含内核模块的包必须放在该模块中*******
#

# 是否包含devel组件(/usr/src /usr/include ... .h 文件)
_move_devel="y"
_move_devel_target="6_010_devel"
_move_devel_dir="
usr/src
usr/include
"
# 以上指定需要删除的非运行库文件夹和源文件夹
_move_devel_file_type="
.c
.h
.cpp
"
# 以上指定需要删除的非运行库文件及源文件类型

# 基本文件系统aufs squashfs是否已经编译到内核？
# 也就是定制的目标系统内核时，aufs squash不是作为模块而是编译进内核
KERNEL_KEY_FS_INCLUDED="n"
# 不建议将这些文件系统支持编译到内核
# 如果此处为"y"而且aufs、squashfs确实编译进了内核，在制作启动镜像时忽略aufs squashfs 找不到的错误.

# 是否快速安装  （此选项在第一次安装时 或者指定的工作目录为全新时 适用）
QUICK_INSTALL="n"
# 如果定义的list已经很成熟，依赖关系明确，list里面不包含版本信息，list指定的没有被注释的软件绝对存在于指定的软件仓库，则选择 使用此选项快速安装
# 如果指定的工作目录已经安装过，则此选项无效，安装时候会直接先升级再安装删除改变的软件包
#
# 特别注意： 如果清单中有任何一个不存在于现设置的软件仓库中，整个清单都不会安装 —— pacman 的特性决定
#

# 附加程序模块——每个模块只有一个软件
# 可以采用#注释去掉 
# 如果定义了版本信息将被忽略
EXTRAMODULES="#git
#subversion
#gcc
#mercurial
"
# 如果模块已经安装是否继续制作独立模块
RE_EXTRAMODULES="y"
#RE_EXTRAMODULES="n"

# 自定义软件仓
_CUSTOM_REPO="n"
REPO="/mnt/sda9/cpkg"
REPO_Name="archlive-pkg"

# 强制使用pacman.static (强制使用时，即使是Arch系统也下载pacman.static)
#USE_STATIC_PACMAN="y"
USE_STATIC_PACMAN="n"
#新版本的pacman暂时静态编译不成功，不要强制使用pacman.static


# 需要删除的目录，overlay中对应目录不删除
DELDIR="var/lib/pacman/sync usr/share/doc usr/share/devhelp usr/share/gtk-doc usr/share/wallpapers"

# 直接添加的程序模块存放位置——直接合盘的模块（以前制作的不需要再更新的模块）
EXTRAPACKAGEDIR="${PROFILE_DIR}/packages"

# 以前制作的模块不包含在此次定制时的备份目录(工作目录下的目录名)
NO_NEED_MODULES="no_need_modules"

# 特别定制
# 弥补部分人不想要OVERLAY但要实现部分定制的功能
# mkarchlive 会直接将该文件夹下的文件及文件夹直接复制到*base*模块中
#SP_CUSTOM_DIR=""
SP_CUSTOM_DIR="${PROFILE_DIR}/sp_custom"

# 内核文件名
KER_FILE="vmlinuz26"
# 使用Arch官方内核及Archlive定制内核，以上值千万不可改变
# 如果采用定制内核，该文件名非以上值，则确保启动配置文件同步更改，否则目标镜像无法启动

# 模块化文件下载地址
TGZURL="http://archlive.googlecode.com/files/"

# 个性化定制
# =========================================================
#是否使用overlay来个性化定制——主要是个人配置，特别程序等
USE_OVERLAY="y"
#USE_OVERLAY="n"

# USE_OVERLAY="n"时以下定制将无效

# 预装主题、图标、鼠标指针、附加字体等
# 主题文件包名称  **-theme.tgz
THEME=""
#THEME="mac4lin"
# 图标文件包名称  **-icons.tgz"
ICON=""
#ICON="gos3"
#ICON="gos3 mac4lin"
# 鼠标指针文件包名称  **-cursor.tgz"
CURSOR=""
#CURSOR="mac4lin"
#附加字体包 **-font.tgz
EXTRAFONTS=""
#EXTRAFONTS="iYaHei yahei"

# 下载后是否删除源文件 overlay.tgz cd-root.tgz等
DELETE_TGZ="y"
