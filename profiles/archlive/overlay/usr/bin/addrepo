#!/bin/bash
# 该脚本将在指定目录创建Arch软件仓库（指定仓库名）  作者 Carbon Jiao
# 同时调用python脚本将这些仓库上传到googlecode的相应项目
# 本脚本给予GPL v3发布，使用者须遵循GPL v3相应规定
# 本脚本调用的脚本版权归原作者
# 
# 该脚本主要实现三个功能：
# 1、在制定目录下建立自定义软件仓；
#    调用pacman软件组中的一个脚本repo-add
# 2、将制定目录下的自定义软件仓批量上传到googlecode的制定项目空间；
#    调用googlecode官方的一个python上传脚本
#    在使用upload或者all命令的时候，会在该命令目录下产生两个文件
#	old.list   上传前googlecode上对应项目的文件清单
#	new.list  上传后googlecode上对应项目的文件清单
#    脚本会自动检测预上传的文件夹下的软件是否已经存在于googlecode项目上
# 3、将自定义软件仓的相关设置加到制定的 pacman.conf 
#    (一般用户/etc/pacman.conf， 制作archlive的就还有另外的软件仓配置文件了）
#    脚本会自动检测软件仓配置文件中是否已经存在预添加的软件仓
# 
#----2009-09-06更新： 加入checkuser函数, 更新list_in_project函数
#----2009-06-16更新： 加入文件大小判断，简化文件是否上传的判断条件
#

APPNAME=$(basename "${0}")
UserName=""
Passwd=""
# 此密码非gmail帐号密码，是项目授权密码  在http://code.google.com/hosting/settings页面查看

# 默认预修改的软件仓配置文件,用-c 可以指定另外的配置文件
# 预添加的软件仓第一优先: 
# 在"# uncommented to enable the repo."行后开始定义软件仓.
# 原始/etc/pacman.conf行有以上的标的行
PACMANCONF="/etc/pacman.conf"

# 在指定文件下的文件中不上传的文件清单，须全名
if [ -f $(pwd)/exclude.list ]; then
	EXCLUDELIST="$(pwd)/exclude.list"
else
	EXCLUDELIST=""
fi
# 软件仓数据库文件制作脚本，属于pacman
if [ -f "$(pwd)/repo-add" ]; then 
   REPO_ADD="$(pwd)/repo-add"
else
   REPO_ADD="/usr/bin/repo-add"
fi

# 如果googlecode上已经存在预提交的文件，则不覆盖
FORCE="n"
# 即使googlecode上已经存在预提交的文件也提交
#FORCE="y"

usage ()
{
    echo " 用法:  ${APPNAME} [选项]  命令 <命令选项>"
    echo " 选项:"
    echo "    -p Project_Name   预上传到googlecode的项目名"
    echo "       archlive相关项目 archlive  wiki.archlive  archlive-pkg  wiki.archlive-pkg"
    echo "    -u UserName	Googlecode帐号"
    echo "    -w Passwd      Googlecode密码"
    echo "    -e EXCLUDELIST 不上传的文件清单"
    echo "    -c pacman.conf 预添加自定义软件仓的配置文件"
    echo "    -f               即使googlecode上已经有的文件也上传"
    echo "    -h               本帮助信息."
    echo " 命令:"
    echo "     create <REPO_DIR> <REPO_NAME>  在<REPO_DIR>下创建名为<REPO_NAME>的软件仓"
    echo "     upload <REPO_DIR>   将<REPO_DIR>下的文件提交到<Project_Name>项目"
    echo "     add <REPO_DIR> <REPO_NAME>     将本地<REPO_DIR>下的<REPO_NAME>软件仓加入到指定的pacman.conf"
    echo "     c_and_u <REPO_DIR> <REPO_NAME> 在本地<REPO_DIR>下建立名为<REPO_NAME>的软件仓，并提交到<REPO_NAME>项目"
    echo "     c_and_a <REPO_DIR> <REPO_NAME> 在本地<REPO_DIR>下建立名为<REPO_NAME>的软件仓，并加入到指定的pacman.conf"
    exit $1
}

error () { echo "XXX $@";}
warn () { echo "!!! $@";}
info () { echo "*** $@";}

# 维护googlecode人员用户信息
checkuser ()
{ 
	if [ "x$UserName" = "x" -o "x$Passwd" = "x" ]; then 
		if [ -f ~/.googlecode ]; then
			. ~/.googlecode
		else
			warn "无googlecode用户信息"
			warn "请 -u 用户名 -w 密码 来指定."
			usage 1
		fi
	else
		if [ -f ~/.googlecode ]; then
			sed -i "s/UserName=.*/UserName=\"$UserName\"/g" ~/.googlecode
			sed -i "s/Passwd=.*/Passwd=\"$Passwd\"/g" ~/.googlecode
		else
			echo "UserName=$UserName" >~/.googlecode
			echo "Passwd=$Passwd" >>~/.googlecode
		fi		
	fi
}

# 检测、配置输入的命令
while getopts 'p:u:w:c:e:fh' arg; do
    case "${arg}" in
	p) Project_Name="${OPTARG}" ;;
	u) UserName="${OPTARG}" ;;
	w) Passwd="${OPTARG}" ;;
	c) PACMANCONF="${OPTARG}" ;;
	e) EXCLUDELIST="${OPTARG}" ;;
	f) FORCE="y" ;;
    h|?) usage 0 ;;
    *) echo "无效参数 '${arg}'"; usage 1 ;;
    esac
done

echo "参数及命令: $@"
shift $(($OPTIND - 1))
echo "命令: $@"
#[ $# -le 1 ] && usage 1

command_name="${1}"

case "${command_name}" in
    create) REPO_DIR="${2}"; REPO_NAME="${3}"; remark="创建本地自定义软件仓(Repo)" ;;
    upload) REPO_DIR="${2}"; remark="将本地自定义软件仓(Repo)提交到Googlecode" ;;
    add) REPO_DIR="${2}"; REPO_NAME="${3}"; remark="将本地自定义软件仓(Repo)加到软件仓配置文件${PACMANCONF}" ;;
    c_and_u) REPO_DIR="${2}"; REPO_NAME="${3}"; remark="创建Repo并上传到${Project_Name}项目" ;;
    c_and_a) REPO_DIR="${2}"; REPO_NAME="${3}"; remark="创建Repo并加到软件仓配置文件${PACMANCONF}" ;;
    *) warn "未知命令'${command_name}'"; usage 1 ;;
esac

if [ "x${REPO_DIR}" = "x" ]; then REPO_DIR="/mnt/sda3/cpkg"; fi
if [ "x${REPO_NAME}" = "x" ]; then REPO_NAME="archlive-pkg"; fi
if [ "x${Project_Name}" = "x" ]; then Project_Name="archlive-pkg"; fi

info " ${APPNAME}程序设置:"
echo " 命令: ${command_name} —— ${remark}"
echo " 预创建的软件仓位置: ${REPO_DIR}"
echo " 预创建的软件仓名: ${REPO_NAME}"
echo " 预上传googlecode的项目名: ${Project_Name}"
echo " 预上传使用的用户名: ${UserName}"
echo " 预上传用户的密码: ${Passwd}"
echo " 预添加自定义软件仓的配置文件: ${PACMANCONF}"
echo " 不上传文件名清单: ${EXCLUDELIST}"
echo " 是否覆盖: ${FORCE}"
sleep 1

# 自定义软件仓
custom_repo () 
{
    for pkgfile in $(ls ${REPO_DIR}/*.pkg.tar.gz); do
		sh ${REPO_ADD} ${REPO_DIR}/${REPO_NAME}.db.tar.gz $pkgfile
    done
    rm -rf ${REPO_DIR}/${REPO_NAME}.db.tar.gz.old
}

# 列出已经上传googlecode项目的文件
list_in_project ()
{
    local i=0
    local n=0
    local a=0
    echo "正从http://$1.googlecode.com 上导出下载清单到$2, 请稍候..."
    [ -f tmp ] && rm -f tmp
    while [ $a -le 100 ]; do
	links -no-g -dump "http://code.google.com/p/$1/downloads/list?start=$i" | grep "gz" | awk '{print $1}' | sort >>tmp
	if [ $? -ne 0 ]; then
		error "无法访问http://code.google.com/p/${Project_Name}/downloads/list，请检查网络连接"
		break
	fi
	n=$(wc tmp | awk '{print $1}')
	let i+=100
	a=`expr $i - $n`
    done
    sort tmp >$2 && rm -f tmp
    [ $n -gt 0 ] && echo "完成! 总共 $n 条记录."
}

# 检查软件仓$1  是否已经在  软件仓配置文件$2  中定义
is_in_pacmanconf ()
{ 
   if [ "x$(cat ${PACMANCONF} | sed -r "s/#.*//" | egrep  "\[*${REPO_NAME}\]")" = "x" ]; then echo "0"; fi
}

# 将自定义的软件仓加入到PACMANCONF中，默认第一优先
# pacman.conf须是在# and they will be used before the default mirrors.行后开始定义软件仓.
add_customrepo2pacmanconf ()
{
   if [ "$(is_in_pacmanconf ${REPO_NAME} ${PACMANCONF})" = "0" ]; then
	sudo sed -i "/# uncommented to enable the repo./ a\
		\ \n#本地自定义软件仓\n[${REPO_NAME}]\
		\nServer = file://${REPO_DIR} \n" ${PACMANCONF}
	if [ $? -eq 0 ]; then info "添加成功!"; else error "添加错误！请查看原文件！"; fi
   else
	warn "该软件仓已经添加到${PACMANCONF},请检查${PACMANCONF}："
	info " 如果定义的为同一软件仓库，则无须添加"
	info " 如果定义的不是同一软件仓，则重新指定软件仓名称，重新运行$APPNAME create...来创建软件仓"
	info " 再运行 $APPNAME add ... 添加到软件仓配置文件pacman.conf"
   fi
}

_create ()
{
    if [ x"${REPO_DIR}" = "x" -o x"${REPO_NAME}" = "x" ]; then 
		error "必须指定软件仓位置及软件仓名"
		usage 1
    else
		info "在${REPO_DIR} 建立自定义软件仓库[${REPO_NAME}]"
		custom_repo ${REPO_DIR} ${REPO_NAME}
    fi
	info "在目录${REPO_DIR}下的软件仓${REPO_NAME}建立完成！"
}

_upload ()
{
	checkuser

	if [ "x${REPO_DIR}" = "x" ]; then 
		error "必须指定软件仓位置"
		usage 1
	fi

	# 上传到googlecode的python脚本
	UPLOADPROG="/usr/bin/googlecode_upload.py"
	if [ ! -f $(pwd)/googlecode_upload.py ] && [ ! -x ${UPLOADPROG} ]; then
		wget -q http://support.googlecode.com/svn/trunk/scripts/googlecode_upload.py
		chmod +x $(pwd)/googlecode_upload.py
		UPLOADPROG="$(pwd)/googlecode_upload.py"
	fi
	info "正将自定义软件仓${REPO_DIR}下的文件，以用户${UserName}身份上传到googlecode项目${Project_Name}"
	list_in_project ${Project_Name} $(pwd)/old.list

    for file in $(ls ${REPO_DIR}); do
	exist=""
	exclude=""
	info "查看$file是否需要上传"

	size=$(ls -l ${REPO_DIR}/$file | cut -d " " -f 5)
	if [ $size -ge 99999999 ]; then 
		echo "$file 大小为$size，超过googlecode上传上限"
		exclude="y"
	fi

	if [ "x$(cat $(pwd)/old.list | egrep "$file")" != "x" ]; then 
		exist="y"
		if [ "${FORCE}" != "y" ]; then exclude="y"; else exclude="n"; fi
	fi

	if [ "x${EXCLUDELIST}" != "x" ]; then
		[ "x$(cat ${EXCLUDELIST} | sed -r "s/#.*//" | egrep "$file")" != "x" ] && (exclude="y")
	fi

	# *.pkg.tar.gz 是软件仓数据库文件，无论是否存在是否排除，均需要更新
	if [ "x$(ls -l ${REPO_DIR}/$file | cut -d " " -f 8 | grep "db.tar.gz")" != "x" ]; then exclude="n"; fi

	if [ "${exclude}" != "y" ]; then
		if [ "${exist}" = "y" ]; then
			warn "$file已经存在于http://${Project_Name}.googlecode.com, 现在重新上传覆盖"
		else
			info "正将${REPO_DIR}/$file 上传到 http://${Project_Name}.googlecode.com"
		fi
		python ${UPLOADPROG} -s $file -p ${Project_Name} -u ${UserName} -w ${Passwd} -l $file ${REPO_DIR}/$file
		if [ $? -ne 0 ]; then
			 error "上传$file失败，请检查网络或者googlecode，网络不通或者该文件已经上传?" 
		fi
	fi
    done
    list_in_project ${Project_Name} $(pwd)/new.list
}

_add ()
{
    if [ "x${REPO_DIR}" = "x" -o "x${REPO_NAME}" = "x" ]; then 
	error "必须指定软件仓位置及软件仓名"
	usage 1
    fi
    if [ "x${PACMANCONF}" = "x" ]; then
	error "必须指定预添加到的pacman.conf"
	usage 1
    fi
    info "将${REPO_DIR}下的自定义软件仓${REPO_NAME}添加到软件仓配置文件${PACMANCONF}"
    add_customrepo2pacmanconf ${REPO_NAME} ${REPO_DIR} ${PACMANCONF}
}

if [ "${command_name}" = "create" -o "${command_name}" = "c_and_u" -o "${command_name}" = "c_and_a" ]; then _create; fi
if [ "${command_name}" = "upload" -o "${command_name}" = "c_and_u" ]; then _upload; fi
if [ "${command_name}" = "add" -o "${command_name}" = "c_and_a" ]; then _add; fi
