#!/bin/bash
# 自动编译维护repo的脚本  作者 Carbon Jiao
# 本脚本给予GPL v3发布，使用者须遵循GPL v3相应规定
# 本脚本调用的脚本版权归原作者
#
# 本脚本主要实现以下功能：
# 1、将指定的文件或者指定的目录下的文件上传到googlecode指定项目
# 2、从指定googlecode SVN或者hg仓库检出
# 2、将本地修改的更新回googlecode指定项目的svn或者hg仓库
#
#----2009-09-06更新： 更新list_in_project函数
#----2009-08-22更新： 让hg push的时候如果不成功则不停尝试——Googlecode的Broken pipe问题
#----2009-07-09更新： 加入wiki hg仓库的支持
#----2009-07-04更新： 将googlecode用户信息存放到~/.googlecode下
#
APPNAME=$(basename "${0}")

Project_Name=""
START=$(pwd)

usage ()
{
    echo " 用法:  ${APPNAME} [选项]  命令 <命令选项>"
    echo " 选项:"
    echo "    -p Project_Name   预上传到googlecode的项目名"
    echo "       archlive相关项目 archlive  wiki.archlive  archlive-pkg  wiki.archlive-pkg"
    echo "    -u UserName	    Googlecode帐号"
    echo "    -w Passwd         Googlecode密码，访问http://code.google.com/hosting/settings获取"
    echo "    -m MESSAGE      提交到googlecode仓库的说明信息"
    echo "    -f                即使googlecode上已经有的软件包也上传"
    echo "    -h                本帮助信息."
    echo " 命令:"
    echo "     upload <target>  将target或者其下的文件上传到googlecode指定项目"
    echo "     co <SVNDIR>     从googlecode指定项目检出文件到SVNDIR下"
    echo "     update    将当前目录下的SVN更新到googlecode SVN仓库"
    echo "     clone <HGDIR>     从googlecode指定项目检出文件到HGDIR下"
    echo "     push    将当前目录下的hg仓库修改更新到googlecode hg仓库"
    exit $1
}

error () { echo "错误 $@";}
warn () { echo "警告 $@";}
info () { echo "*** $@";}

# 检测、配置输入的命令
while getopts 'p:u:w:m:e:F:r:ifh' arg; do
    case "${arg}" in
	p) Project_Name="${OPTARG}" ;;
	u) UserName="${OPTARG}" ;;
	w) Passwd="${OPTARG}" ;;
	m) MESSAGE="${OPTARG}" ;;
	f) FORCE="y" ;;
    h|?) usage 0 ;;
    *) echo "无效参数 '${arg}'"; usage 1 ;;
    esac
done

[ "x$Project_Name" = "x" ] && (warn "必须指定googlecode项目名, $APPNAME -p 项目名 命令" && usage 1)
URL="https://${Project_Name}.googlecode.com"
SVN="$URL/svn/trunk"

# 维护googlecode人员用户信息
checkuser ()
{ 
	if [ "x$UserName" = "x" -o "x$Passwd" = "x" ]; then 
		if [ -f ~/.googlecode ]; then
			. ~/.googlecode
		else
			warn "无googlecode用户信息"
			warn "请 -u 用户名 -w 密码 来指定."
			usage 1
		fi
	else
		if [ -f ~/.googlecode ]; then
			sed -i "s/UserName=.*/UserName=\"$UserName\"/g" ~/.googlecode
			sed -i "s/Passwd=.*/Passwd=\"$Passwd\"/g" ~/.googlecode
		else
			echo "UserName=$UserName" >~/.googlecode
			echo "Passwd=$Passwd" >>~/.googlecode
		fi		
	fi
}

echo "参数及命令: $@"
shift $(($OPTIND - 1))
echo "命令: $@"

command_name="${1}"

case "${command_name}" in
    upload) target="${2}" ; remark="上传$target到googlecode软件仓" ;;
    co) SVNDIR="${2}" ; remark="从googlecode指定项目检出文件到$SVNDIR下" ;;
    update) remark="将本地的修改更新到googlecode的SVN仓库$Project_Name" ;;
    clone) HGDIR="${2}" ; remark="从googlecode指定项目的hg仓库检出文件到HGDIR下" ;;
    push) remark="将本地的修改更新到googlecode $Project_Name的HG仓库" ;;
    *) warn "未知命令'${command_name}'"; usage 1 ;;
esac

[ "${command_name}" = "upload" ] && [ "x${target}" = "x" ] && (warn "必须指定上传的目标文件或者目标目录" && usage 1)

if [ "${command_name}" = "co" ] && 	[ "x${SVNDIR}" = "x" ]; then SVNDIR=$Project_Name; fi
if [ "${command_name}" = "clone" ] && [ "x${HGDIR}" = "x" ]; then HGDIR=$Project_Name; fi

[ "${command_name}" = "update" -o "${command_name}" = "push" ] && [ "x$MESSAGE" = "x" ] && \
	(warn "必须说明更新描述，以方便大家查看修改内容, $APPNAME -m "更新说明" -p 项目名 命令" && usage 1)

# 列出已经上传googlecode项目的文件
list_in_project ()
{
    local i=0
    local n=0
    local a=0
    echo "正从http://$1.googlecode.com 上导出下载清单到$2, 请稍候..."
    [ -f tmp ] && rm -f tmp
    while [ $a -le 100 ]; do
	links -no-g -dump "http://code.google.com/p/$1/downloads/list?start=$i" | grep "gz" | awk '{print $1}' | sort >>tmp
	if [ $? -ne 0 ]; then
		error "无法访问http://code.google.com/p/${Project_Name}/downloads/list，请检查网络连接"
		break
	fi
	n=$(wc tmp | awk '{print $1}')
	let i+=100
	a=`expr $i - $n`
    done
    sort tmp >$2 && rm -f tmp
    [ $n -gt 0 ] && echo "完成! 总共 $n 条记录."
}
do_upload ()
{
    checkuser
    # 上传到googlecode的python脚本
    UPLOADPROG="/usr/bin/googlecode_upload.py"
    if [ ! -f $START/googlecode_upload.py ] && [ ! -x ${UPLOADPROG} ]; then
	wget -q http://support.googlecode.com/svn/trunk/scripts/googlecode_upload.py
	mv googlecode_upload.py $START/
	chmod +x $START/googlecode_upload.py
	UPLOADPROG="$START/googlecode_upload.py"
    fi

    #上传文件不支持wiki，换为对应的项目下载地址
    Project_Name=${Project_Name#wiki.}

    list_in_project ${Project_Name} $START/old.list

    if [ "x$(file ${target} | grep "directory")" != "x" ] ; then
	echo "现在开始将$target目录下的文件上传到googlecode"
    	for file in $(ls $target); do
		exist=""
		exclude=""
		info "查看$file是否需要上传"

		size=$(ls -l $target/$file | cut -d " " -f 5)
		if [ $size -ge 99999999 ]; then 
			# googlecode最大允许100MB
			echo "$file 大小为$size，超过googlecode上传上限"
			exclude="y"
		fi

		if [ "x$(cat $START/old.list | egrep "^$file")" != "x" ]; then 
			exist="y"
			# 如果googlecode上已经存在，如果有 -f 参数，则须要上传，否则不上传
			if [ "${FORCE}" != "y" ]; then exclude="y"; else exclude="n"; fi
		fi

		# *.db.tar.gz 是软件仓数据库文件，无论是否存在是否排除，均需要更新
		if [ "x$(ls -l $target/$file | cut -d " " -f 8 | egrep "db.tar.gz")" != "x" ]; then exclude="n"; fi

		if [ "${exclude}" != "y" ]; then
			if [ "${exist}" = "y" ]; then
				warn "$file已经存在于http://${Project_Name}.googlecode.com, 现在重新上传覆盖"
			else
				info "正将$target/$file上传到 http://${Project_Name}.googlecode.com"
			fi
			python ${UPLOADPROG} -s ${file##*/} -p ${Project_Name} -u ${UserName} -w ${Passwd} -l $file $target/$file
			if [ $? -ne 0 ]; then
			 	error "上传$file失败，请检查网络或者googlecode，网络不通或者该文件已经上传?" 
			fi
		fi
    	done
    else
	exist=""
	exclude=""
	size=$(ls -l $target | cut -d " " -f 5)
	if [ $size -ge 99999999 ]; then 
		# googlecode最大允许100MB
		echo "$target大小为$size，超过googlecode上传上限"
		exclude="y"
	fi
	if [ "x$(cat $START/old.list | egrep "^$target")" != "x" ]; then 
		exist="y"
		# 如果googlecode上已经存在，如果有 -f 参数，则须要上传，否则不上传
		if [ "${FORCE}" != "y" ]; then exclude="y"; else exclude="n"; fi
	fi
	if [ "x$exist" = "x" -o "$exclude" = n ]; then
		echo "现在将$target上传到googlecode"
		python ${UPLOADPROG} -s ${target##*/} -p ${Project_Name} -u ${UserName} -w ${Passwd} -l $target $target
	fi
    fi
    list_in_project ${Project_Name} $START/new.list
    #rm -f $START/{old.list,new.list}
}

# 从指定的SVN仓库检出
do_checkout ()
{
	checkuser
	echo "从$SVN检出到$SVNDIR下"
	svn co ${SVN} $SVNDIR --username ${UserName} --password $Passwd
}
#从指定的HG仓库检出
do_clone ()
{
	HG="https://${Project_Name}.googlecode.com/hg"
	echo "从$HG检出到${HGDIR}下"
	hg clone $HG ${HGDIR}
	cd ${HGDIR}
}

# 提交更新到googlecode的SVN仓
do_update ()
{
	checkuser
	svn up
	svn ci -m "由${UserName}于$(date +%F" "%T)更新: $MESSAGE" --username ${UserName} --password $Passwd
}
# 将本地hg仓库的修改提交到googlecode hg仓
do_push ()
{
   checkuser
   #hg addremove
   hg ci -u ${UserName} -m "由${UserName%@gmail.com}于$(date +%F" "%T)更新: $MESSAGE"
   i=1
   while true; do
	echo "第$i次push"
	hg push https://${UserName%@gmail.com}%40gmail.com:$Passwd@${Project_Name}.googlecode.com/hg
	[ $? -eq 0 ] && break
	let i+=1
   done
}

if [ "${command_name}" = "upload" ]; then do_upload; fi
if [ "${command_name}" = "co" ]; then do_checkout; fi
if [ "${command_name}" = "update" ]; then do_update; fi
if [ "${command_name}" = "clone" ]; then do_clone; fi
if [ "${command_name}" = "push" ]; then do_push; fi