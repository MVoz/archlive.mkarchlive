#!/bin/busybox ash
#
# Archlive 启动脚本 属于Archlive项目的一部分
# This script is a part of the Archlive project.
#
# Author: Carbon Jiao <carbonjiao alt gmail dot com>
# 作者 Carbon Jiao  <carbonjiao alt gmail dot com>
# 更新于2010.12.20
# Update in 2010.12.20

# 由此开始美妙的旅程  Magic start here 
# 创建busybox包含程序的链接
# Install busybox's applets as symlinks
/bin/busybox --install -s

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin:/session-save

/bin/mount -t proc proc /proc -o nosuid,noexec,nodev
/bin/mount -t sysfs sys /sys -o nosuid,noexec,nodev
if grep -q devtmpfs /proc/filesystems 2>/dev/null; then
  /bin/mount -n -t devtmpfs udev /dev -o mode=0755,size=10M,nosuid
else
  /bin/mount -n -t tmpfs udev /dev -o mode=0755,size=10M,nosuid
  # We don't have devtmpfs, so add the most important standard devices
  /bin/mknod /dev/null c 1 3
  /bin/mknod /dev/zero c 1 5
  /bin/mknod /dev/console c 5 1
  # /dev/mem is needed if we want to load uvesafb before triggering uevents
  /bin/mknod /dev/mem c 1 1
fi

read CMDLINE </proc/cmdline
export CMDLINE
export cmd_line="$@"

. /usr/lib/liblinuxlive # it requires proc to be mounted

echo "/sbin/modprobe" > /proc/sys/kernel/modprobe

# if available, start udevd at this stage
# 如果支持相关KMS 此处加载
if [ -x /sbin/udevd ]; then
    echo > /proc/sys/kernel/hotplug
    /sbin/udevd --daemon --resolve-names=never 2>&1 >/dev/null
    export udevd_running=1
    # msg -n ":: Triggering uevents..."
    /sbin/udevadm trigger --action=add 2>&1 >/dev/null
    /sbin/udevadm settle 2>&1 >/dev/null
else
    export udevd_running=0
fi


# Checking boot paremeters 检查启动参数
for cmd in ${CMDLINE}; do
    case "${cmd}" in
        \#*) break ;; # ignore everything after a # in the commandline
        # The kernel passes those to the kernel on its own
        [0123456Ss]) ;;
        [0-9]*) ;;
        single) ;;
        rw) readwrite="yes" ;;
        ro) readwrite="no" ;;
        # only export stuff that does work with ash :)
        *=*) rhs="$(echo "${cmd}" | cut -d= -f2-)"
             cmd="$(echo "${cmd}" | cut -d= -f1 | sed 's|\.|_|g')"
             cmd="$(echo "${cmd}" | sed 's|-|_|g')=${rhs}"
             (echo "${cmd}" | grep -qe '^[0-9]') || export "${cmd}"
             ;;
        *)   cmd="$(echo "${cmd}" | sed 's|\.|_|g')"
             cmd="$(echo "${cmd}" | sed 's|-|_|g')"
             (echo "${cmd}" | grep -qe '^[0-9]') || export "${cmd}=y"
             ;;
    esac
done


# 双（多）模式启动判断
# Special for dul-boot
case $CMDLINE in *i686*) export ARCH="i686" ;;
		*x86_64*) export ARCH="x86_64" ;;
esac

if [ "x${ARCH}" = "x" ]; then
	ARCH=$(uname -m)
fi

if [ "$break" = "y" ] || [ "$debug" = "y" ]; then
	export DEBUG_IS_ENABLED="y"
fi

clear
echo
if [ "$cn" = "y" ]; then
	hg "                   欢迎使用 Archlive ! $boot_version"
else
	hg "                   Welcome to Archlive ! $boot_version"	
fi
hl "*******************************************************************************"
echo
if [ "$cn" = "y" ]; then
	echo -e  "${EMY}  Archlive${RST}, 基于${EMY}Arch GNU/Linux${RST}的${EMG}live系统${EMY} ($ARCH)${RST}."
else
	echo -e  "${EMY}  Archlive${RST}, ${EMG}live system ($ARCH)${RST} base on ${EMY}Arch GNU/Linux${RST}."
fi

if [ "$cn" = "y" ]; then
	hr "  此系统基于GNU通用发布协议(GPL)发行."
else
	hr "  Distributed under the GNU General Public License (GPL)."  
fi
hl "*******************************************************************************"
echo

if [ "$cn" = "y" ]; then
	msg "现在开始启动 ..."
else
	msg "Now start to boot..."
fi

# 不输出内核启动相关信息到终端
echo "0" > /proc/sys/kernel/printk

# Used so hooks can override params to kinit
export kinit_params=""
export root=""
export init=""
#echo "/sbin/modprobe" > /proc/sys/kernel/modprobe

# set default mount handler
mount_handler="default_mount_handler"

# 调试用测试点
debug_shell

# 启动参数通过 disablehooks="a,b" 来禁止运行启动脚本 a 和 b
if [ -n "${disablehooks}" ]; then
    for d in $(echo "${disablehooks}" | sed 's|,| |g'); do
        export "hook_${d}=disabled"
    done
fi

# Special for plymouth 启动参数有 splash 时才启动 plymouth
[ "$splash" != "y" ] && export "hook_plymouth=disabled"

# 启动参数通过 disablemodules="a,b" 来禁止装载内核模块 a 和 b
if [ -n "${disablemodules}" ]; then
    for d in $(echo "${disablemodules}" | sed 's|,| |g'); do
        export "mod_${d}=disabled"
    done
fi

# 启动参数通过 earlymodules="a,b" 来优先装载内核模块 a 和 b
if [ -n "${earlymodules}" ]; then
    for m in $(echo "${earlymodules}" | sed 's|,| |g'); do
        /sbin/modprobe -q ${m} > /dev/null 2>&1
    done
fi

# 载入启动配置文件：需要装载的内核模块(MODULES参数)，运行的启动模块(HOOKS参数)等
. /config

# 装载启动配置文件中指定的内核模块
for m in ${MODULES}; do
    TST=""
    eval "TST=\$mod_${m}"
    if [ "${TST}" != "disabled" ]; then
        /sbin/modprobe -q ${m} > /dev/null 2>&1
    fi
done

# If rootdelay is empty or not a non-negative integer, set it to 10
if [ -z "${rootdelay}" ] || ! [ "${rootdelay}" -ge 0 ]; then
    export rootdelay=10
fi

# Set our usbdelay time. Default: 0
/bin/mkdir -p /etc/modproble.d/
echo "options usb-storage delay_use=${usbdelay:-0}" > /etc/modprobe.d/usb-delay

# Set the maxium quantity of loop device from 8 to 64
echo "options loop max_loop=128" > /etc/modprobe.d/modprobe.conf

# 运行启动配置文件中指定的启动脚本
# live 系统通过在启动脚本中加入 exec init 或者 pivot_root 或者 chroot 来离开此启动脚本并切换到 root
if [ -e "/hooks" ]; then
    for h in ${HOOKS}; do
        TST=""
        eval "TST=\$hook_${h}"
        if [ "${TST}" != "disabled" ]; then
            run_hook () { info "${h}: no run function defined"; }
            if [ -e "/hooks/${h}" ]; then
               . /hooks/${h}
               if [ "$cn" = "y" ]; then
			info "运行启动脚本 $EMW[$G${h}$EMW]"
               else
			info "Running Hook $EMW[$G${h}$EMW]"
               fi
               run_hook
            fi
        fi
    done
fi

# ===========================================================
# START BOOT ACTIONS SPECIAL FOR ARCHLIVE
# ===========================================================

[ -d /var/log ] || mkdir -p /var/log

# 挂载基本模块 (loop isofs squashfs aufs ext2 ext3 ext4 btrfs reiserfs xfs vfat fuse ntfs)
# Load essential drivers, like CDROM drivers, aufs/squashfs etc,
# use mdev to create /dev/ devices and setup it as a hotplug-handler
modprobe_essential_modules

#[ -x /sbin/btrfs ] && (/sbin/btrfs device scan 2>/dev/null 1>/dev/null)

# 挂载 squashfs 压缩的驱动及usr 目录（如果有）
# /usr and some drivers are compressed in initrd 
# so it must be mounted from .lzm files
mount_initrd_loops

# 硬件初始化程序  busybox自带的mdev 或者 udev
#mdev_start_hotplug
#udev_start_hotplug

# 初始化USB、PCMCIA等模块
modprobe_usb_modules
[ "$pcmcia" = "y" ] && (modprobe_pcmcia_modules)

# 调试用测试点
debug_shell

# make sure ext3 partitions are not mounted using ext2 driver,
# and vfat partitions are not mounted using msdos driver
echo -e "ext3\next2\nvfat\n*" >/etc/filesystems

# 建立挂载点
mkdir -p $UNION
mkdir -p $MEMORY

# 调试用测试点
debug_shell

######### Search Archlive ################

# 启动参数可以通过sgn=...来定义搜索标的，该文件同一目录下的文件夹即为模块文件夹
export SGN
SGN=$sgn
if [ -z $sgn ]; then SGN=$LIVECDNAME.list; fi
if [ "$cn" = "y" ]; then
	echolog "搜索$LIVECDNAME模块(根据$SGN定位):"
else
	echolog "Search modules of $LIVECDNAME by target: $SGN ..."
fi

# 在启动参数中加入archlivelabel="..."  archliveuuid="..." from="..." cifs="..." 或者 ip="..." 可以加快查找基本模块


# 方式A. archlivelabel=[] 参数 从指定卷标（盘符）的分区或者光盘启动。
#	可以同时指定 from 参数指定下级文件夹， 比如
#	archlivelabel=F from=archlive/20101212
#	则从F盘下的archlive/20101212文件夹下启动archlive

# 方式B. archliveuuid=[] 参数指定启动分区的UUID
#	可以同时指定 from 参数指定下级文件夹， 比如
#	archliveuuid=005B-005C from=archlive/20101212
#	则从UUID为005B-005C的分区下的archlive/20101212文件夹下启动archlive

# 方式C.  ip=[] 参数，挂载http共享并启动。可以同时指定 from 参数
#	ip=<client-ip>:<boot-server-ip>:<gw-ip>:<netmask>
#	启动参数 ip=192.168.0.144:192.168.0.252:192.168.0.1:255.255.255.0 from=archlive 则表示
#	启动标的 $sgn 放在 http://192.168.0.252/archlive/ 下
#	启动标的 $sgn 同级目录下有 base modules 等模块目录

# 方式D. cifs=[] 参数，挂载共享并启动。比如 cifs="//192.168.0.252/share" user="archlive" passwd="archlive"
#	则将 http://192.168.0.252/archlive 以用户archlive 密码 archlive 挂载到 /union/httpfs
#	并从 /union/httpfs 启动 archlive

# 方式E. 启动参数加pxe，PXE 启动

# 方式F. from=[] 来指定本地目录，比如 from="/dev/sda1/archlive"

# 方式G. 只用 from 参数指定 archlive的相对目录，比如 from=archlive/20101212
#	则在电脑各分区或者磁盘中查找目录为 archlive/20101212  并从找到的第一个结果中启动

if [ "x$archlivelabel" != "x" ] && [ -d /dev/disk/by-label ]; then
	# 方式 A
	if [ "x$from" != "x" ]; then
		DATA=$(find_filepath /dev/disk/by-label/$archlivelabel $from/$SGN)
	else
		DATA=$(find_filepath /dev/disk/by-label/$archlivelabel $SGN)
	fi
elif [ "x$archliveuuid" != "x" ] && [ -d /dev/disk/by-uuid ]; then
	# 方式 B
	if [ "x$from" != "x" ]; then
		DATA=$(find_filepath /dev/disk/by-uuid/$archliveuuid $from/$SGN)
	else
		DATA=$(find_filepath /dev/disk/by-uuid/$archliveuuid $SGN)
	fi

elif [ "x$ip" != "x" ]; then
	# 方式 C
	if [ "x$from" != "x" ]; then
		DATAFROM="http://"$(echo $ip | cut -d : -f 2)"/$from"
	else
		DATAFROM="http://"$(echo $ip | cut -d : -f 2)
	fi
	if [ "$cn" = "y" ]; then
		debug_log "PXE启动：from=$DATAFROM"
	else
		debug_log "PXE BOOT：from=$DATAFROM"
	fi

	# 初始化网络
	# 如果启动参数中 netdevice=eth0 则激活网卡eth0 动态获取ip地址
	# 如果启动参数中 netdevice=wlan0 essid="A" pass="00000000001" 则激活无线网卡wlan0, 使用密码"0000000001" 登录无线AP "A"
	# 如果启动参数中 netdevice=wlan0 essid="A" pass="s:aaa" 则激活无线网卡wlan0, 使用字符密码 "aaa"登录无线AP "A"
	init_net $netdevice $essid $key

	mount_httpfs $DATAFROM $MOUNTDIR/httpfs
      	# if mountdir/httpfs/livecdname is found, set DATA=, else umount httpfs
	DATA="$MOUNTDIR/httpfs"
	[ ! -f $DATA/$SGN ] && [ ! -d $DATA/base ] && export DATA=""

elif [ "x$cifs" != "x" ]; then
	# 方式 D
	DATAFROM="$cifs"
	if [ "$cn" = "y" ]; then
		debug_log "挂载共享分区并启动：from=$DATAFROM"
	else
		debug_log "Mount CIFS share and boot：from=$DATAFROM"
	fi
	init_net $netdevice $essid $key

	# 挂载cifs文件系统到 $MOUNTDIR/cifs
	# 如果挂载成功则 DATA="$MOUNTDIR/cifs"
	mount_cifs $DATAFROM $MOUNTDIR/cifs $user $passwd
	DATA="$MOUNTDIR/cifs"
	[ ! -f $DATA/$SGN ] && [ ! -d $DATA/base ] && export DATA=""

elif [ "x$pxe" != "x" ]; then
	# 方式 E
	init_net $netdevice $essid $key
	export NFS="$(ipconfig $1 | grep rootpath | awk -Frootpath: '{print $2}')"
	nfsmount ${NFS} $MOUNTDIR/nfs
	DATA="$MOUNTDIR/nfs"
	[ ! -f $DATA/$SGN ] && [ ! -d $DATA/base ] && export DATA=""

elif [ "x$from" != "x" ] && [ "${from/dev/}" !=  "${from}" ]; then
	# 方式 F
	if [ "$cn" = "y" ]; then
		debug_log "根据from=$from来查找模块"
	else
		debug_log "Search modules by term: from=$from"
	fi
	if [ "${from:9:1}" = "/" ]; then
		DATA=$(find_filepath "${from::10}" "${from:10}/$SGN")
	elif [ "${from:8:1}" = "/" ]; then
		DATA=$(find_filepath "${from::9}" "${from:9}/$SGN")
	fi
	debug_log "DATA=$DATA"
	DATA="$(dirname $DATA 2>/dev/null)"

elif [ "x$from" != "x" ]; then
	# 方式 G
	if [ "$cn" = "y" ]; then
		debug_log "根据$from来查找模块文件"
	else
		debug_log "Search modules by term: from=$from"
	fi
	DATA=$(find_in_computer $from/$SGN)

# 如果启动参数没有按照上述几种方式指定archlive位置，程序自动从本地所有资源按照默认目录结构查找
else
	if [ "$cn" = "y" ]; then
		debug_log "按照$LIVECDNAME默认方式从本地所有资源查找$SGN"
	else
		debug_log "Search $LIVECDNAME modules by target $SGN in local as default."
	fi
	DATA=$(find_in_computer $LIVECDNAME/$SGN)
fi

debug_log "DATA=$DATA"
DATA=$(dirname $DATA 2>/dev/null)

# 调试用测试点
debug_shell

# 以上方式均无法找到（iso或者写到USB后目录结构调整过，或者from ip 或者 其他参数无效时）
if [ "$DATA" = "" ]; then
	if [ "$cn" = "y" ]; then
		debug_log "根据启动参数无法找到$SGN，再次从本地所有资源查找"
	else
		debug_log "Can't found target $SGN by boot arguments，search modules again"
	fi
	# from= is not used or it didn't contain valid data
	DATA=$(find_in_computer $SGN)
	DATA=$(dirname $DATA 2>/dev/null)
fi

# 调试用测试点
debug_shell

if [ "$DATA" = "" ]; then
	if [ "$cn" = "y" ]; then
		fatal \
		"没有找到 $LIVECDNAME 的程序模块. 查找标的$SGN被误删除? 
		可能使用了不被支持的启动设备(比如 SCSI或者老的PCMCIA). 
		解决办法: 将$LIVECDNAME目录从你的启动设备拷贝到IDE/SATA盘，比如拷贝到 
		/mnt/hda1/$LIVECDNAME 或者 C:盘 $LIVECDNAME目录. 然后重新启动."
	else
		fatal \
		"Can't found $LIVECDNAME modules. Target file $SGN was deleted? 
		Or you are using an unsupported boot device (eg. old SCSI, old PCMCIA).
		Solutions: Copy the directory $LIVECDNAME from your boot device to an 
		IDE/SATA disk, eg. to /mnt/hda1/$LIVECDNAME or directory $LIVECDNAME under disk C:, then reboot."
	fi
else
	if [ "x$(find_modules $DATA)" != "x" ]; then
		if [ "$cn" = "y" ]; then
			echolog "在指定的$from找到模块文件"
		else
			echolog "Found modules in $from"
		fi
		DATA="$DATA"
	fi
fi

#########   Boot Archlive  ################

if [ "$cn" = "y" ]; then
	echolog "从$DATA 启动 $LIVECDNAME"
else
	echolog "Booting $LIVECDNAME from $DATA..."
fi

# 调试用测试点
debug_shell

CHANGESVAL=$changes
if [ "$CHANGESVAL" ]; then
	if [ "$cn" = "y" ]; then
		echolog "设置$changes保存修改..."
	else
		echolog "Setting up directory $changes for changes ..."
	fi
	CHANGESMNT=$(find_in_computer $CHANGESVAL)
	echolog $CHANGESMNT
fi

# 调试用测试点
debug_shell

mount_device "$CHANGESMNT" $MEMORY # removes $MEMORY if CHANGESMNT is wrong

# 检测指定的changes是否可写
touch $MEMORY/empty 2>/dev/null && \
rm -f $MEMORY/empty 2>/dev/null
# 如果changes无法被正确挂载或者其不可写，则用默认的tmpfs
if [ $? -ne 0 ]; then
	if [ "$CHANGESVAL" ]; then
		if [ "$cn" = "y" ]; then
				echolog "启动参数$changes设置的目标不可用或者不可写, 使用内存存储,
				重启将丢失修改的内容."
		else
			echolog "Changes not used or not writable, using memory only,
			changes will be lost after reboot."
		fi
	fi
	fumount $MEMORY
	mkdir -p $MEMORY # mount_device might removed it

	# 调试用测试点
	debug_shell

	#RAMSIZE=$(cmdline_value ramsize)
	RAMSIZE=$ramsize
	if [ "$RAMSIZE" = "" ]; then RAMSIZE="60%"; fi
	mount -t tmpfs -o "size=$RAMSIZE" tmpfs $MEMORY
	XINO=$MEMORY
else
	# So it is writable, we will keep the filesystem mounted.
	# Check if it supports links and chmod.
	# If not, overmount CHANGES using posixovl
	if [ "$cn" = "y" ]; then
		echolog "检测文件系统的posix兼容性 ..."
	else
		echolog "Testing the filesystem for posix compatibility ..."
	fi
	touch $MEMORY/.empty1 && \
	ln -sf $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null && \
	chmod +x $MEMORY/.empty1 2>/dev/null  && \
	test -x $MEMORY/.empty1 && \
	chmod -x $MEMORY/.empty1 2>/dev/null  && \
	test ! -x $MEMORY/.empty1 && \
	rm $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null

	if [ $? -ne 0 ]; then
		if [ "$cn" = "y" ]; then
			echolog "不兼容 - 开启 posiovl"
		else
			echolog "Not compatible - starting posixovl"
		fi
		rm $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null
		mkdir -p $CHANGES
		posixovl -F $CHANGES -- -o attr_timeout=300,entry_timeout=300,negative_timeout=300,kernel_cache,allow_other
		find $CHANGES >/dev/null 2>&1 # cache everything now
	fi
fi

# $UNION 将被作为root系统, 模块都将挂载在此目录
if [ "$cn" = "y" ]; then
	echolog "设置$UNION目录 (使用aufs)"
else
	echolog "Setup $UNION directory (using aufs)"
fi

if [ "$cn" = "y" ]; then
	debug_log "IMAGES保存模块的路径: IMAGES=$IMAGES CHANGES=$CHANGES"
else
	debug_log "Modules were mounted on: IMAGES=$IMAGES"
fi
mkdir -p $CHANGES
mkdir -p $IMAGES

# 调试用测试点
debug_shell

# 将xino文件存储在内存, 更快速、安全
if [ "$XINO" != "$MEMORY" ]; then
	mkdir -p $XINO
	mount -n -t tmpfs tmpfs $XINO
fi

# mount aufs using the writable branch as the first one (leftmost/topmost)
mount -t aufs -o nowarn_perm,xino=$XINO/.aufs.xino,br:$CHANGES=rw aufs $UNION
if [ $? -ne 0 ]; then dmesg | tail -n 1; fatal "can't setup union (aufs)"; fi

# 调试用测试点
debug_shell

# If toram or copy2ram boot parameter is present, copy all fs modules to RAM.
# (skip modules from /optional/ which are not listed in load= boot option)
# Finaly modify DATA variable so it will point to correct directory
if [ "$(cmdline_parameter toram)" != "" -o "$(cmdline_parameter copy2ram)" != "" ]; then
	if [ "$cn" = "y" ]; then
		echolog "拷贝$LIVECDNAME数据到内存，请稍候..."
	else
		echolog "copying $LIVECDNAME data to RAM, this may take some time..."
	fi
	mkdir -p $COPY2RAM

	# make sure it's in RAM even with changes= parameter
	if [ "$CHANGESMNT" ]; then mount -t tmpfs -o "size=$RAMSIZE" tmpfs $COPY2RAM; fi
	copy_to_ram $DATA $COPY2RAM

	cd_autoeject 1
	fumount $DATA
	fumount $MOUNTDIR/*
	rmdir $MOUNTDIR/* 2>/dev/null # mounted device names are empty, remove them
	DATA=$COPY2RAM
	cd_autoeject 0
fi

# 调试用测试点
debug_shell

# DATA包含archlive里面的base目录，模块目录，可选模块目录
# 现在挂载到aufs文件系统中
if [ "$cn" = "y" ]; then
	echolog "装载模块:"
	debug_log "将$DATA下的模块挂载到$IMAGES，文件系统挂载到$UNION"
else
	echolog "Loading modules:"
	debug_log "Mount modules under $DATA to $IMAGES，mount root filesystem to $UNION"
fi
debug_shell
union_insert_modules $UNION $DATA $IMAGES

debug_shell
# the $MEMORY directory can contain $MEMORY/modules too
# in the case if changes= boot argument is used. If not, it doesn't hurt
# 挂载保存修改的文件系统
debug_log "MEMORY=$MEMORY"
union_insert_modules $UNION $MEMORY $IMAGES

# 调试用测试点
debug_shell

# 默认装载$LIVECDNAME 中 rootcopy目录(只要存在， 除非有norootcopy参数)
if [ $(cmdline_parameter norootcopy) ]; then
	if [ "$cn" = "y" ]; then
		echolog "启动参数有norootcopy"
	else
		echolog "Has argument: norootcopy, then not using rootcopy."
	fi
elif [ -d $DATA/rootcopy ]; then
	if [ "$cn" = "y" ]; then
		echolog "将$DATA/rootcopy下内容拷贝到$UNION"
	else
		echolog "Copying content of rootcopy directory"
	fi
	cp -af $DATA/rootcopy/* $UNION 2>/dev/null
fi

# 加载 addons 目录下以xz压缩的保存模块
if [ "x$(ls -1 $DATA/addons)" != "x" ]; then
	echolog "加载$DATA/addons下的之前保存的内容，可能需要几分钟时间..."
	for i in $(ls -1 $DATA/addons/*.xz 2>/dev/null); do
		tar -xJpf $i -C $UNION
	done
fi

# 拷贝liblinuxlive库到$UNION/usr/lib/
cp -af /usr/lib/liblinuxlive $UNION/usr/lib/

# 拷贝备份程序
cp -af /usr/bin/mksquashfs $UNION/usr/bin/

debug_log "挂载$DATA到 $UNION$DATADIR"
mkdir -p $UNION$DATADIR 2>&1 >/dev/null
if [ -d $(dirname $DATA) ]; then
	mount -o bind $(dirname $DATA) $UNION$DATADIR
else
	mount -o bind $DATA $UNION$DATADIR
fi
debug_log "挂载$CHANGES到$UNION/.live/changes"
mkdir -p $UNION/.live/changes
mount -o bind $CHANGES $UNION/.live/changes

overlay=$(basename $(ls -1 $DATA/*/*overlay*))
if [ "x$overlay" != "x" ]; then
	debug_log "挂载$overlay到$UNION/.live/overlay"
	mkdir -p $UNION/.live/overlay
	mount -o bind $IMAGES/$overlay $UNION/.live/overlay
	sed -i "s|overlayname=.*|overlayname=$overlay|g" $UNION/usr/lib/liblinuxlive
fi

# 调试用测试点
debug_shell

if [ "$cn" = "y" ]; then
	echolog "更新 /etc/fstab 和硬盘分区挂载目录/mnt/... "
else
	echolog "Update /etc/fstab and mount_directories /mnt/... "
fi
fstab_update $UNION
cp -f $UNION/etc/fstab $UNION/etc/mtab

# everything is ready now, so we may unload unused kernel modules
rmmod_unused_modules


# More likely these directories aren't there.
# Even if they are, this won't hurt.
mkdir -p $UNION/boot
mkdir -p $UNION/proc
mkdir -p $UNION/sys
mkdir -p $UNION/dev
mkdir -p $UNION/var/log
mkdir -p -m 1777 $UNION/var/tmp
mkdir -p -m 1777 $UNION/var/lock
mkdir -p $UNION/tmp
chmod 1777 $UNION/tmp
chmod 1777 $UNION/var/tmp
mknod $UNION/dev/console c 5 1
:>$UNION/var/log/wtmp
:>$UNION/var/log/utmp
:>$UNION/var/log/lastlog
:>$UNION/var/log/btmp
chmod 0600 $UNION/var/log/btmp

# 调试用测试点
debug_shell

# This is for setup of locale varible in archlive
lang=$(cmdline_value lang)
if [ "$lang" ]; then
	if [ -f "$UNION/etc/rc.conf" ]; then
		sed -i -e "s/^ *\(LOCALE=\).*$/\1"$lang.utf8"/" $UNION/etc/rc.conf
		touch $UNION/etc/locale.gen
		echo "$lang.UTF-8 UTF-8" >> $UNION/etc/locale.gen
		echo "$lang ISO-8859-1" >> $UNION/etc/locale.gen
	fi
fi

# 调试用测试点
debug_shell

if [ "$cn" = "y" ]; then
	echolog "切换root目录到$UNION..."
else
	echolog "Changing root directory to $UNION..."
fi

cd $UNION

# Copy all dev files (found by mdev) to unioned dev directory
# so at least disk devices exist (your Linux may need them).
# Two exceptions, do not copy pty* and tty* devs.
if [ ! -e /dev/console ]; then mknod /dev/console c 5 1; fi
cp -fdR /dev . 2>/dev/null

# 调试用测试点
debug_shell

# time to end Linux Live scripts and start the distribution itself,
# using /sbin/init or whatever was found.
# We will copy init from the distro to initrd (there should be 2MB free)
# This allows us to use the cleanup script during reboot, as init will be
# started from memory and not from the union and /union will not be busy.

if [ -x bin/init ]; then INIT=bin/init; fi
if [ -x sbin/init ]; then INIT=sbin/init; fi
if [ "$cn" = "y" ]; then
	if [ "$INIT" = "" ]; then fatal "没有找到init命令"; fi
else
	if [ "$INIT" = "" ]; then fatal "Can't find executable init command"; fi
fi

# killall udevd
if [ "$cn" = "y" ]; then
	echolog "清理udevd进程..."
else
	echolog "Kill UDev Daemon..."
fi
udevpid=$(pidof udevd 2>/dev/null)
debug_log "udevpid=$udevpid"
if [ "x${udevpid}" != "x" ]; then
	# Settle pending uevents, then kill udev
	udevadm settle >/dev/null 2>&1
#	while /bin/pidof udevd >/dev/null; do
#		sleep 0.1
#	done
	for i in $udevpid; do
		kill -9 ${udevpid} > /dev/null 2>&1
	done
	sleep 0.01
fi
udevpid=$(pidof udevd 2>/dev/null)
debug_log "udevpid=$udevpid"

if [ "$cn" = "y" ]; then
	debug_log "切换到 $UNION启动."
else
	debug_log "switch_root to $UNION"
fi

# Boot log
debug_log "BOOT_LOG=${BOOT_LOG}"
cp -f "${BOOT_LOG}" "${UNION}${BOOT_LOG}"
debug_log "${BOOT_LOG} 已复制到 ${UNION}${BOOT_LOG}"
debug_shell

mount --move /proc /new_root/proc
mount --move /sys /new_root/sys
mount --move /dev /new_root/dev
exec /sbin/switch_root -c /dev/console ${UNION} ${INIT} ${CMDLINE}

debug_log "看到此消息switch_root失败"
